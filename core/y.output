Terminals which are not used

   EXTENDS
   METHOD


State 17 conflicts: 1 shift/reduce
State 28 conflicts: 1 reduce/reduce
State 30 conflicts: 1 shift/reduce
State 33 conflicts: 1 shift/reduce
State 34 conflicts: 1 reduce/reduce
State 38 conflicts: 2 shift/reduce
State 77 conflicts: 2 shift/reduce
State 78 conflicts: 2 shift/reduce
State 79 conflicts: 2 shift/reduce
State 80 conflicts: 2 shift/reduce
State 81 conflicts: 2 shift/reduce
State 82 conflicts: 2 shift/reduce
State 83 conflicts: 2 shift/reduce
State 84 conflicts: 2 shift/reduce
State 85 conflicts: 2 shift/reduce
State 86 conflicts: 2 shift/reduce
State 87 conflicts: 2 shift/reduce
State 88 conflicts: 2 shift/reduce
State 89 conflicts: 2 shift/reduce
State 90 conflicts: 2 shift/reduce
State 93 conflicts: 2 shift/reduce
State 99 conflicts: 17 shift/reduce
State 100 conflicts: 16 shift/reduce
State 134 conflicts: 16 shift/reduce
State 143 conflicts: 16 shift/reduce
State 154 conflicts: 16 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: NIL
    3    | INT
    4    | STRING
    5    | id LBRACK exp RBRACK OF exp
    6    | id LBRACE recordFields RBRACE
    7    | NEW id
    8    | lvalue
    9    | id LPAREN args RPAREN
   10    | lvalue DOT id LPAREN explist RPAREN
   11    | MINUS exp
   12    | exp DOUBLEPLUS
   13    | exp DOUBLEMINUS
   14    | opexp
   15    | LPAREN explist RPAREN
   16    | lvalue ASSIGN exp
   17    | IF exp THEN exp ELSE exp
   18    | IF exp THEN exp
   19    | WHILE exp DO exp
   20    | FOR id ASSIGN exp TO exp DO exp
   21    | BREAK
   22    | LET decs IN explist END

   23 lvalue: id
   24       | lvalue DOT id
   25       | lvalue LBRACK exp RBRACK
   26       | id LBRACK exp RBRACK

   27 opexp: exp PLUS exp
   28      | exp MINUS exp
   29      | exp TIMES exp
   30      | exp DIVIDE exp
   31      | exp EQ exp
   32      | exp NEQ exp
   33      | exp GT exp
   34      | exp LT exp
   35      | exp GE exp
   36      | exp LE exp
   37      | exp ARITH_AND exp
   38      | exp ARITH_OR exp
   39      | exp LOGIC_AND exp
   40      | exp LOGIC_OR exp

   41 explist: exp SEMICOLON explist
   42        | exp
   43        | /* empty */

   44 args: exp COMMA args
   45     | exp
   46     | /* empty */

   47 recordFields: id EQ exp COMMA recordFields
   48             | id EQ exp
   49             | /* empty */

   50 decs: dec decs
   51     | dec SEMICOLON decs
   52     | mixdecs SEMICOLON decs
   53     | mixdecs decs
   54     | mixdecs
   55     | dec
   56     | /* empty */

   57 dec: tydecs
   58    | CLASS
   59    | vardec
   60    | fundecs
   61    | PRIMITIVE
   62    | IMPORT

   63 tydecs: tydec tydecs
   64       | tydec

   65 tydec: TYPE id EQ ty

   66 ty: typeid
   67   | LBRACE tyfields RBRACE
   68   | ARRAY OF typeid

   69 tyfields: id COLON typeid COMMA tyfields
   70         | id COLON typeid
   71         | /* empty */

   72 vardec: VAR id COLON typeid ASSIGN exp
   73       | VAR id ASSIGN exp

   74 fundecs: fundec fundecs
   75        | fundec

   76 fundec: FUNCTION id LPAREN tyfields RPAREN COLON typeid EQ exp
   77       | FUNCTION id LPAREN tyfields RPAREN EQ exp

   78 mixdecs: VAR id ASSIGN ARRAY OF typeid LBRACK exp RBRACK OF exp

   79 typeid: id

   80 id: ID


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 3
ID (259) 80
STRING (260) 4
ARRAY (261) 68 78
IF (262) 17 18
THEN (263) 17 18
ELSE (264) 17
WHILE (265) 19
FOR (266) 20
TO (267) 20
DO (268) 19 20
LET (269) 22
IN (270) 22
END (271) 22
OF (272) 5 68 78
BREAK (273) 21
NIL (274) 2
FUNCTION (275) 76 77
VAR (276) 72 73 78
TYPE (277) 65
IMPORT (278) 62
PRIMITIVE (279) 61
CLASS (280) 58
EXTENDS (281)
METHOD (282)
NEW (283) 7
COMMA (284) 44 47 69
COLON (285) 69 70 72 76
SEMICOLON (286) 41 51 52
LPAREN (287) 9 10 15 76 77
RPAREN (288) 9 10 15 76 77
LBRACK (289) 5 25 26 78
RBRACK (290) 5 25 26 78
LBRACE (291) 6 67
RBRACE (292) 6 67
DOT (293) 10 24
PLUS (294) 27
MINUS (295) 11 28
TIMES (296) 29
DIVIDE (297) 30
EQ (298) 31 47 48 65 76 77
NEQ (299) 32
LT (300) 34
LE (301) 36
GT (302) 33
GE (303) 35
ASSIGN (304) 16 20 72 73 78
DOUBLEPLUS (305) 12
DOUBLEMINUS (306) 13
LOGIC_AND (307) 39
LOGIC_OR (308) 40
ARITH_AND (309) 37
ARITH_OR (310) 38


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
program (57)
    on left: 1, on right: 0
exp (58)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
   , on right: 1 5 11 12 13 16 17 18 19 20 25 26 27 28 29 30 31 32
    33 34 35 36 37 38 39 40 41 42 44 45 47 48 72 73 76 77 78
lvalue (59)
    on left: 23 24 25 26, on right: 8 10 16 24 25
opexp (60)
    on left: 27 28 29 30 31 32 33 34 35 36 37 38 39 40,
    on right: 14
explist (61)
    on left: 41 42 43, on right: 10 15 22 41
args (62)
    on left: 44 45 46, on right: 9 44
recordFields (63)
    on left: 47 48 49, on right: 6 47
decs (64)
    on left: 50 51 52 53 54 55 56, on right: 22 50 51 52 53
dec (65)
    on left: 57 58 59 60 61 62, on right: 50 51 55
tydecs (66)
    on left: 63 64, on right: 57 63
tydec (67)
    on left: 65, on right: 63 64
ty (68)
    on left: 66 67 68, on right: 65
tyfields (69)
    on left: 69 70 71, on right: 67 69 76 77
vardec (70)
    on left: 72 73, on right: 59
fundecs (71)
    on left: 74 75, on right: 60 74
fundec (72)
    on left: 76 77, on right: 74 75
mixdecs (73)
    on left: 78, on right: 52 53 54
typeid (74)
    on left: 79, on right: 66 68 69 70 72 76 78
id (75)
    on left: 80, on right: 5 6 7 9 10 20 23 24 26 47 48 65 69 70 72
    73 76 77 78 79


state 0

    0 $accept: . program $end

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    program  go to state 13
    exp      go to state 14
    lvalue   go to state 15
    opexp    go to state 16
    id       go to state 17


state 1

    3 exp: INT .

    $default  reduce using rule 3 (exp)


state 2

   80 id: ID .

    $default  reduce using rule 80 (id)


state 3

    4 exp: STRING .

    $default  reduce using rule 4 (exp)


state 4

   17 exp: IF . exp THEN exp ELSE exp
   18    | IF . exp THEN exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 18
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 5

   19 exp: WHILE . exp DO exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 19
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 6

   20 exp: FOR . id ASSIGN exp TO exp DO exp

    ID  shift, and go to state 2

    id  go to state 20


state 7

   22 exp: LET . decs IN explist END

    FUNCTION   shift, and go to state 21
    VAR        shift, and go to state 22
    TYPE       shift, and go to state 23
    IMPORT     shift, and go to state 24
    PRIMITIVE  shift, and go to state 25
    CLASS      shift, and go to state 26

    $default  reduce using rule 56 (decs)

    decs     go to state 27
    dec      go to state 28
    tydecs   go to state 29
    tydec    go to state 30
    vardec   go to state 31
    fundecs  go to state 32
    fundec   go to state 33
    mixdecs  go to state 34


state 8

   21 exp: BREAK .

    $default  reduce using rule 21 (exp)


state 9

    2 exp: NIL .

    $default  reduce using rule 2 (exp)


state 10

    7 exp: NEW . id

    ID  shift, and go to state 2

    id  go to state 35


state 11

   15 exp: LPAREN . explist RPAREN

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    $default  reduce using rule 43 (explist)

    exp      go to state 36
    lvalue   go to state 15
    opexp    go to state 16
    explist  go to state 37
    id       go to state 17


state 12

   11 exp: MINUS . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 38
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 13

    0 $accept: program . $end

    $end  shift, and go to state 39


state 14

    1 program: exp .
   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    $default  reduce using rule 1 (program)


state 15

    8 exp: lvalue .
   10    | lvalue . DOT id LPAREN explist RPAREN
   16    | lvalue . ASSIGN exp
   24 lvalue: lvalue . DOT id
   25       | lvalue . LBRACK exp RBRACK

    LBRACK  shift, and go to state 56
    DOT     shift, and go to state 57
    ASSIGN  shift, and go to state 58

    $default  reduce using rule 8 (exp)


state 16

   14 exp: opexp .

    $default  reduce using rule 14 (exp)


state 17

    5 exp: id . LBRACK exp RBRACK OF exp
    6    | id . LBRACE recordFields RBRACE
    9    | id . LPAREN args RPAREN
   23 lvalue: id .
   26       | id . LBRACK exp RBRACK

    LPAREN  shift, and go to state 59
    LBRACK  shift, and go to state 60
    LBRACE  shift, and go to state 61

    LBRACK    [reduce using rule 23 (lvalue)]
    $default  reduce using rule 23 (lvalue)


state 18

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   17    | IF exp . THEN exp ELSE exp
   18    | IF exp . THEN exp
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    THEN         shift, and go to state 62
    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55


state 19

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   19    | WHILE exp . DO exp
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    DO           shift, and go to state 63
    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55


state 20

   20 exp: FOR id . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 64


state 21

   76 fundec: FUNCTION . id LPAREN tyfields RPAREN COLON typeid EQ exp
   77       | FUNCTION . id LPAREN tyfields RPAREN EQ exp

    ID  shift, and go to state 2

    id  go to state 65


state 22

   72 vardec: VAR . id COLON typeid ASSIGN exp
   73       | VAR . id ASSIGN exp
   78 mixdecs: VAR . id ASSIGN ARRAY OF typeid LBRACK exp RBRACK OF exp

    ID  shift, and go to state 2

    id  go to state 66


state 23

   65 tydec: TYPE . id EQ ty

    ID  shift, and go to state 2

    id  go to state 67


state 24

   62 dec: IMPORT .

    $default  reduce using rule 62 (dec)


state 25

   61 dec: PRIMITIVE .

    $default  reduce using rule 61 (dec)


state 26

   58 dec: CLASS .

    $default  reduce using rule 58 (dec)


state 27

   22 exp: LET decs . IN explist END

    IN  shift, and go to state 68


state 28

   50 decs: dec . decs
   51     | dec . SEMICOLON decs
   55     | dec .

    FUNCTION   shift, and go to state 21
    VAR        shift, and go to state 22
    TYPE       shift, and go to state 23
    IMPORT     shift, and go to state 24
    PRIMITIVE  shift, and go to state 25
    CLASS      shift, and go to state 26
    SEMICOLON  shift, and go to state 69

    IN        reduce using rule 55 (decs)
    IN        [reduce using rule 56 (decs)]
    $default  reduce using rule 55 (decs)

    decs     go to state 70
    dec      go to state 28
    tydecs   go to state 29
    tydec    go to state 30
    vardec   go to state 31
    fundecs  go to state 32
    fundec   go to state 33
    mixdecs  go to state 34


state 29

   57 dec: tydecs .

    $default  reduce using rule 57 (dec)


state 30

   63 tydecs: tydec . tydecs
   64       | tydec .

    TYPE  shift, and go to state 23

    TYPE      [reduce using rule 64 (tydecs)]
    $default  reduce using rule 64 (tydecs)

    tydecs  go to state 71
    tydec   go to state 30


state 31

   59 dec: vardec .

    $default  reduce using rule 59 (dec)


state 32

   60 dec: fundecs .

    $default  reduce using rule 60 (dec)


state 33

   74 fundecs: fundec . fundecs
   75        | fundec .

    FUNCTION  shift, and go to state 21

    FUNCTION  [reduce using rule 75 (fundecs)]
    $default  reduce using rule 75 (fundecs)

    fundecs  go to state 72
    fundec   go to state 33


state 34

   52 decs: mixdecs . SEMICOLON decs
   53     | mixdecs . decs
   54     | mixdecs .

    FUNCTION   shift, and go to state 21
    VAR        shift, and go to state 22
    TYPE       shift, and go to state 23
    IMPORT     shift, and go to state 24
    PRIMITIVE  shift, and go to state 25
    CLASS      shift, and go to state 26
    SEMICOLON  shift, and go to state 73

    IN        reduce using rule 54 (decs)
    IN        [reduce using rule 56 (decs)]
    $default  reduce using rule 54 (decs)

    decs     go to state 74
    dec      go to state 28
    tydecs   go to state 29
    tydec    go to state 30
    vardec   go to state 31
    fundecs  go to state 32
    fundec   go to state 33
    mixdecs  go to state 34


state 35

    7 exp: NEW id .

    $default  reduce using rule 7 (exp)


state 36

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp
   41 explist: exp . SEMICOLON explist
   42        | exp .

    SEMICOLON    shift, and go to state 75
    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    $default  reduce using rule 42 (explist)


state 37

   15 exp: LPAREN explist . RPAREN

    RPAREN  shift, and go to state 76


state 38

   11 exp: MINUS exp .
   12    | exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    DOUBLEPLUS   [reduce using rule 11 (exp)]
    DOUBLEMINUS  [reduce using rule 11 (exp)]
    $default     reduce using rule 11 (exp)


state 39

    0 $accept: program $end .

    $default  accept


state 40

   27 opexp: exp PLUS . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 77
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 41

   28 opexp: exp MINUS . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 78
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 42

   29 opexp: exp TIMES . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 79
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 43

   30 opexp: exp DIVIDE . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 80
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 44

   31 opexp: exp EQ . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 81
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 45

   32 opexp: exp NEQ . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 82
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 46

   34 opexp: exp LT . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 83
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 47

   36 opexp: exp LE . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 84
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 48

   33 opexp: exp GT . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 85
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 49

   35 opexp: exp GE . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 86
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 50

   12 exp: exp DOUBLEPLUS .

    $default  reduce using rule 12 (exp)


state 51

   13 exp: exp DOUBLEMINUS .

    $default  reduce using rule 13 (exp)


state 52

   39 opexp: exp LOGIC_AND . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 87
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 53

   40 opexp: exp LOGIC_OR . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 88
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 54

   37 opexp: exp ARITH_AND . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 89
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 55

   38 opexp: exp ARITH_OR . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 90
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 56

   25 lvalue: lvalue LBRACK . exp RBRACK

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 91
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 57

   10 exp: lvalue DOT . id LPAREN explist RPAREN
   24 lvalue: lvalue DOT . id

    ID  shift, and go to state 2

    id  go to state 92


state 58

   16 exp: lvalue ASSIGN . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 93
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 59

    9 exp: id LPAREN . args RPAREN

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    $default  reduce using rule 46 (args)

    exp     go to state 94
    lvalue  go to state 15
    opexp   go to state 16
    args    go to state 95
    id      go to state 17


state 60

    5 exp: id LBRACK . exp RBRACK OF exp
   26 lvalue: id LBRACK . exp RBRACK

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 96
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 61

    6 exp: id LBRACE . recordFields RBRACE

    ID  shift, and go to state 2

    $default  reduce using rule 49 (recordFields)

    recordFields  go to state 97
    id            go to state 98


state 62

   17 exp: IF exp THEN . exp ELSE exp
   18    | IF exp THEN . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 99
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 63

   19 exp: WHILE exp DO . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 100
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 64

   20 exp: FOR id ASSIGN . exp TO exp DO exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 101
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 65

   76 fundec: FUNCTION id . LPAREN tyfields RPAREN COLON typeid EQ exp
   77       | FUNCTION id . LPAREN tyfields RPAREN EQ exp

    LPAREN  shift, and go to state 102


state 66

   72 vardec: VAR id . COLON typeid ASSIGN exp
   73       | VAR id . ASSIGN exp
   78 mixdecs: VAR id . ASSIGN ARRAY OF typeid LBRACK exp RBRACK OF exp

    COLON   shift, and go to state 103
    ASSIGN  shift, and go to state 104


state 67

   65 tydec: TYPE id . EQ ty

    EQ  shift, and go to state 105


state 68

   22 exp: LET decs IN . explist END

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    $default  reduce using rule 43 (explist)

    exp      go to state 36
    lvalue   go to state 15
    opexp    go to state 16
    explist  go to state 106
    id       go to state 17


state 69

   51 decs: dec SEMICOLON . decs

    FUNCTION   shift, and go to state 21
    VAR        shift, and go to state 22
    TYPE       shift, and go to state 23
    IMPORT     shift, and go to state 24
    PRIMITIVE  shift, and go to state 25
    CLASS      shift, and go to state 26

    $default  reduce using rule 56 (decs)

    decs     go to state 107
    dec      go to state 28
    tydecs   go to state 29
    tydec    go to state 30
    vardec   go to state 31
    fundecs  go to state 32
    fundec   go to state 33
    mixdecs  go to state 34


state 70

   50 decs: dec decs .

    $default  reduce using rule 50 (decs)


state 71

   63 tydecs: tydec tydecs .

    $default  reduce using rule 63 (tydecs)


state 72

   74 fundecs: fundec fundecs .

    $default  reduce using rule 74 (fundecs)


state 73

   52 decs: mixdecs SEMICOLON . decs

    FUNCTION   shift, and go to state 21
    VAR        shift, and go to state 22
    TYPE       shift, and go to state 23
    IMPORT     shift, and go to state 24
    PRIMITIVE  shift, and go to state 25
    CLASS      shift, and go to state 26

    $default  reduce using rule 56 (decs)

    decs     go to state 108
    dec      go to state 28
    tydecs   go to state 29
    tydec    go to state 30
    vardec   go to state 31
    fundecs  go to state 32
    fundec   go to state 33
    mixdecs  go to state 34


state 74

   53 decs: mixdecs decs .

    $default  reduce using rule 53 (decs)


state 75

   41 explist: exp SEMICOLON . explist

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    $default  reduce using rule 43 (explist)

    exp      go to state 36
    lvalue   go to state 15
    opexp    go to state 16
    explist  go to state 109
    id       go to state 17


state 76

   15 exp: LPAREN explist RPAREN .

    $default  reduce using rule 15 (exp)


state 77

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   27      | exp PLUS exp .
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    DOUBLEPLUS   [reduce using rule 27 (opexp)]
    DOUBLEMINUS  [reduce using rule 27 (opexp)]
    $default     reduce using rule 27 (opexp)


state 78

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   28      | exp MINUS exp .
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    DOUBLEPLUS   [reduce using rule 28 (opexp)]
    DOUBLEMINUS  [reduce using rule 28 (opexp)]
    $default     reduce using rule 28 (opexp)


state 79

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   29      | exp TIMES exp .
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    DOUBLEPLUS   [reduce using rule 29 (opexp)]
    DOUBLEMINUS  [reduce using rule 29 (opexp)]
    $default     reduce using rule 29 (opexp)


state 80

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   30      | exp DIVIDE exp .
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    DOUBLEPLUS   [reduce using rule 30 (opexp)]
    DOUBLEMINUS  [reduce using rule 30 (opexp)]
    $default     reduce using rule 30 (opexp)


state 81

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   31      | exp EQ exp .
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    DOUBLEPLUS   [reduce using rule 31 (opexp)]
    DOUBLEMINUS  [reduce using rule 31 (opexp)]
    $default     reduce using rule 31 (opexp)


state 82

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   32      | exp NEQ exp .
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    DOUBLEPLUS   [reduce using rule 32 (opexp)]
    DOUBLEMINUS  [reduce using rule 32 (opexp)]
    $default     reduce using rule 32 (opexp)


state 83

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   34      | exp LT exp .
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    DOUBLEPLUS   [reduce using rule 34 (opexp)]
    DOUBLEMINUS  [reduce using rule 34 (opexp)]
    $default     reduce using rule 34 (opexp)


state 84

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   36      | exp LE exp .
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    DOUBLEPLUS   [reduce using rule 36 (opexp)]
    DOUBLEMINUS  [reduce using rule 36 (opexp)]
    $default     reduce using rule 36 (opexp)


state 85

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   33      | exp GT exp .
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    DOUBLEPLUS   [reduce using rule 33 (opexp)]
    DOUBLEMINUS  [reduce using rule 33 (opexp)]
    $default     reduce using rule 33 (opexp)


state 86

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   35      | exp GE exp .
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    DOUBLEPLUS   [reduce using rule 35 (opexp)]
    DOUBLEMINUS  [reduce using rule 35 (opexp)]
    $default     reduce using rule 35 (opexp)


state 87

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   39      | exp LOGIC_AND exp .
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    DOUBLEPLUS   [reduce using rule 39 (opexp)]
    DOUBLEMINUS  [reduce using rule 39 (opexp)]
    $default     reduce using rule 39 (opexp)


state 88

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp
   40      | exp LOGIC_OR exp .

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    DOUBLEPLUS   [reduce using rule 40 (opexp)]
    DOUBLEMINUS  [reduce using rule 40 (opexp)]
    $default     reduce using rule 40 (opexp)


state 89

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   37      | exp ARITH_AND exp .
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    DOUBLEPLUS   [reduce using rule 37 (opexp)]
    DOUBLEMINUS  [reduce using rule 37 (opexp)]
    $default     reduce using rule 37 (opexp)


state 90

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   38      | exp ARITH_OR exp .
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51

    DOUBLEPLUS   [reduce using rule 38 (opexp)]
    DOUBLEMINUS  [reduce using rule 38 (opexp)]
    $default     reduce using rule 38 (opexp)


state 91

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   25 lvalue: lvalue LBRACK exp . RBRACK
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    RBRACK       shift, and go to state 110
    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55


state 92

   10 exp: lvalue DOT id . LPAREN explist RPAREN
   24 lvalue: lvalue DOT id .

    LPAREN  shift, and go to state 111

    $default  reduce using rule 24 (lvalue)


state 93

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   16    | lvalue ASSIGN exp .
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    DOUBLEPLUS   [reduce using rule 16 (exp)]
    DOUBLEMINUS  [reduce using rule 16 (exp)]
    $default     reduce using rule 16 (exp)


state 94

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp
   44 args: exp . COMMA args
   45     | exp .

    COMMA        shift, and go to state 112
    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    $default  reduce using rule 45 (args)


state 95

    9 exp: id LPAREN args . RPAREN

    RPAREN  shift, and go to state 113


state 96

    5 exp: id LBRACK exp . RBRACK OF exp
   12    | exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   26 lvalue: id LBRACK exp . RBRACK
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    RBRACK       shift, and go to state 114
    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55


state 97

    6 exp: id LBRACE recordFields . RBRACE

    RBRACE  shift, and go to state 115


state 98

   47 recordFields: id . EQ exp COMMA recordFields
   48             | id . EQ exp

    EQ  shift, and go to state 116


state 99

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   17    | IF exp THEN exp . ELSE exp
   18    | IF exp THEN exp .
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    ELSE         shift, and go to state 117
    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    ELSE         [reduce using rule 18 (exp)]
    PLUS         [reduce using rule 18 (exp)]
    MINUS        [reduce using rule 18 (exp)]
    TIMES        [reduce using rule 18 (exp)]
    DIVIDE       [reduce using rule 18 (exp)]
    EQ           [reduce using rule 18 (exp)]
    NEQ          [reduce using rule 18 (exp)]
    LT           [reduce using rule 18 (exp)]
    LE           [reduce using rule 18 (exp)]
    GT           [reduce using rule 18 (exp)]
    GE           [reduce using rule 18 (exp)]
    DOUBLEPLUS   [reduce using rule 18 (exp)]
    DOUBLEMINUS  [reduce using rule 18 (exp)]
    LOGIC_AND    [reduce using rule 18 (exp)]
    LOGIC_OR     [reduce using rule 18 (exp)]
    ARITH_AND    [reduce using rule 18 (exp)]
    ARITH_OR     [reduce using rule 18 (exp)]
    $default     reduce using rule 18 (exp)


state 100

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   19    | WHILE exp DO exp .
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    PLUS         [reduce using rule 19 (exp)]
    MINUS        [reduce using rule 19 (exp)]
    TIMES        [reduce using rule 19 (exp)]
    DIVIDE       [reduce using rule 19 (exp)]
    EQ           [reduce using rule 19 (exp)]
    NEQ          [reduce using rule 19 (exp)]
    LT           [reduce using rule 19 (exp)]
    LE           [reduce using rule 19 (exp)]
    GT           [reduce using rule 19 (exp)]
    GE           [reduce using rule 19 (exp)]
    DOUBLEPLUS   [reduce using rule 19 (exp)]
    DOUBLEMINUS  [reduce using rule 19 (exp)]
    LOGIC_AND    [reduce using rule 19 (exp)]
    LOGIC_OR     [reduce using rule 19 (exp)]
    ARITH_AND    [reduce using rule 19 (exp)]
    ARITH_OR     [reduce using rule 19 (exp)]
    $default     reduce using rule 19 (exp)


state 101

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   20    | FOR id ASSIGN exp . TO exp DO exp
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    TO           shift, and go to state 118
    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55


state 102

   76 fundec: FUNCTION id LPAREN . tyfields RPAREN COLON typeid EQ exp
   77       | FUNCTION id LPAREN . tyfields RPAREN EQ exp

    ID  shift, and go to state 2

    $default  reduce using rule 71 (tyfields)

    tyfields  go to state 119
    id        go to state 120


state 103

   72 vardec: VAR id COLON . typeid ASSIGN exp

    ID  shift, and go to state 2

    typeid  go to state 121
    id      go to state 122


state 104

   73 vardec: VAR id ASSIGN . exp
   78 mixdecs: VAR id ASSIGN . ARRAY OF typeid LBRACK exp RBRACK OF exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    ARRAY   shift, and go to state 123
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 124
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 105

   65 tydec: TYPE id EQ . ty

    ID      shift, and go to state 2
    ARRAY   shift, and go to state 125
    LBRACE  shift, and go to state 126

    ty      go to state 127
    typeid  go to state 128
    id      go to state 122


state 106

   22 exp: LET decs IN explist . END

    END  shift, and go to state 129


state 107

   51 decs: dec SEMICOLON decs .

    $default  reduce using rule 51 (decs)


state 108

   52 decs: mixdecs SEMICOLON decs .

    $default  reduce using rule 52 (decs)


state 109

   41 explist: exp SEMICOLON explist .

    $default  reduce using rule 41 (explist)


state 110

   25 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 25 (lvalue)


state 111

   10 exp: lvalue DOT id LPAREN . explist RPAREN

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    $default  reduce using rule 43 (explist)

    exp      go to state 36
    lvalue   go to state 15
    opexp    go to state 16
    explist  go to state 130
    id       go to state 17


state 112

   44 args: exp COMMA . args

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    $default  reduce using rule 46 (args)

    exp     go to state 94
    lvalue  go to state 15
    opexp   go to state 16
    args    go to state 131
    id      go to state 17


state 113

    9 exp: id LPAREN args RPAREN .

    $default  reduce using rule 9 (exp)


state 114

    5 exp: id LBRACK exp RBRACK . OF exp
   26 lvalue: id LBRACK exp RBRACK .

    OF  shift, and go to state 132

    $default  reduce using rule 26 (lvalue)


state 115

    6 exp: id LBRACE recordFields RBRACE .

    $default  reduce using rule 6 (exp)


state 116

   47 recordFields: id EQ . exp COMMA recordFields
   48             | id EQ . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 133
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 117

   17 exp: IF exp THEN exp ELSE . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 134
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 118

   20 exp: FOR id ASSIGN exp TO . exp DO exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 135
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 119

   76 fundec: FUNCTION id LPAREN tyfields . RPAREN COLON typeid EQ exp
   77       | FUNCTION id LPAREN tyfields . RPAREN EQ exp

    RPAREN  shift, and go to state 136


state 120

   69 tyfields: id . COLON typeid COMMA tyfields
   70         | id . COLON typeid

    COLON  shift, and go to state 137


state 121

   72 vardec: VAR id COLON typeid . ASSIGN exp

    ASSIGN  shift, and go to state 138


state 122

   79 typeid: id .

    $default  reduce using rule 79 (typeid)


state 123

   78 mixdecs: VAR id ASSIGN ARRAY . OF typeid LBRACK exp RBRACK OF exp

    OF  shift, and go to state 139


state 124

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp
   73 vardec: VAR id ASSIGN exp .

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    $default  reduce using rule 73 (vardec)


state 125

   68 ty: ARRAY . OF typeid

    OF  shift, and go to state 140


state 126

   67 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 2

    $default  reduce using rule 71 (tyfields)

    tyfields  go to state 141
    id        go to state 120


state 127

   65 tydec: TYPE id EQ ty .

    $default  reduce using rule 65 (tydec)


state 128

   66 ty: typeid .

    $default  reduce using rule 66 (ty)


state 129

   22 exp: LET decs IN explist END .

    $default  reduce using rule 22 (exp)


state 130

   10 exp: lvalue DOT id LPAREN explist . RPAREN

    RPAREN  shift, and go to state 142


state 131

   44 args: exp COMMA args .

    $default  reduce using rule 44 (args)


state 132

    5 exp: id LBRACK exp RBRACK OF . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 143
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 133

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp
   47 recordFields: id EQ exp . COMMA recordFields
   48             | id EQ exp .

    COMMA        shift, and go to state 144
    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    $default  reduce using rule 48 (recordFields)


state 134

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   17    | IF exp THEN exp ELSE exp .
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    PLUS         [reduce using rule 17 (exp)]
    MINUS        [reduce using rule 17 (exp)]
    TIMES        [reduce using rule 17 (exp)]
    DIVIDE       [reduce using rule 17 (exp)]
    EQ           [reduce using rule 17 (exp)]
    NEQ          [reduce using rule 17 (exp)]
    LT           [reduce using rule 17 (exp)]
    LE           [reduce using rule 17 (exp)]
    GT           [reduce using rule 17 (exp)]
    GE           [reduce using rule 17 (exp)]
    DOUBLEPLUS   [reduce using rule 17 (exp)]
    DOUBLEMINUS  [reduce using rule 17 (exp)]
    LOGIC_AND    [reduce using rule 17 (exp)]
    LOGIC_OR     [reduce using rule 17 (exp)]
    ARITH_AND    [reduce using rule 17 (exp)]
    ARITH_OR     [reduce using rule 17 (exp)]
    $default     reduce using rule 17 (exp)


state 135

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   20    | FOR id ASSIGN exp TO exp . DO exp
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    DO           shift, and go to state 145
    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55


state 136

   76 fundec: FUNCTION id LPAREN tyfields RPAREN . COLON typeid EQ exp
   77       | FUNCTION id LPAREN tyfields RPAREN . EQ exp

    COLON  shift, and go to state 146
    EQ     shift, and go to state 147


state 137

   69 tyfields: id COLON . typeid COMMA tyfields
   70         | id COLON . typeid

    ID  shift, and go to state 2

    typeid  go to state 148
    id      go to state 122


state 138

   72 vardec: VAR id COLON typeid ASSIGN . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 149
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 139

   78 mixdecs: VAR id ASSIGN ARRAY OF . typeid LBRACK exp RBRACK OF exp

    ID  shift, and go to state 2

    typeid  go to state 150
    id      go to state 122


state 140

   68 ty: ARRAY OF . typeid

    ID  shift, and go to state 2

    typeid  go to state 151
    id      go to state 122


state 141

   67 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 152


state 142

   10 exp: lvalue DOT id LPAREN explist RPAREN .

    $default  reduce using rule 10 (exp)


state 143

    5 exp: id LBRACK exp RBRACK OF exp .
   12    | exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    PLUS         [reduce using rule 5 (exp)]
    MINUS        [reduce using rule 5 (exp)]
    TIMES        [reduce using rule 5 (exp)]
    DIVIDE       [reduce using rule 5 (exp)]
    EQ           [reduce using rule 5 (exp)]
    NEQ          [reduce using rule 5 (exp)]
    LT           [reduce using rule 5 (exp)]
    LE           [reduce using rule 5 (exp)]
    GT           [reduce using rule 5 (exp)]
    GE           [reduce using rule 5 (exp)]
    DOUBLEPLUS   [reduce using rule 5 (exp)]
    DOUBLEMINUS  [reduce using rule 5 (exp)]
    LOGIC_AND    [reduce using rule 5 (exp)]
    LOGIC_OR     [reduce using rule 5 (exp)]
    ARITH_AND    [reduce using rule 5 (exp)]
    ARITH_OR     [reduce using rule 5 (exp)]
    $default     reduce using rule 5 (exp)


state 144

   47 recordFields: id EQ exp COMMA . recordFields

    ID  shift, and go to state 2

    $default  reduce using rule 49 (recordFields)

    recordFields  go to state 153
    id            go to state 98


state 145

   20 exp: FOR id ASSIGN exp TO exp DO . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 154
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 146

   76 fundec: FUNCTION id LPAREN tyfields RPAREN COLON . typeid EQ exp

    ID  shift, and go to state 2

    typeid  go to state 155
    id      go to state 122


state 147

   77 fundec: FUNCTION id LPAREN tyfields RPAREN EQ . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 156
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 148

   69 tyfields: id COLON typeid . COMMA tyfields
   70         | id COLON typeid .

    COMMA  shift, and go to state 157

    $default  reduce using rule 70 (tyfields)


state 149

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp
   72 vardec: VAR id COLON typeid ASSIGN exp .

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    $default  reduce using rule 72 (vardec)


state 150

   78 mixdecs: VAR id ASSIGN ARRAY OF typeid . LBRACK exp RBRACK OF exp

    LBRACK  shift, and go to state 158


state 151

   68 ty: ARRAY OF typeid .

    $default  reduce using rule 68 (ty)


state 152

   67 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 67 (ty)


state 153

   47 recordFields: id EQ exp COMMA recordFields .

    $default  reduce using rule 47 (recordFields)


state 154

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   20    | FOR id ASSIGN exp TO exp DO exp .
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    PLUS         [reduce using rule 20 (exp)]
    MINUS        [reduce using rule 20 (exp)]
    TIMES        [reduce using rule 20 (exp)]
    DIVIDE       [reduce using rule 20 (exp)]
    EQ           [reduce using rule 20 (exp)]
    NEQ          [reduce using rule 20 (exp)]
    LT           [reduce using rule 20 (exp)]
    LE           [reduce using rule 20 (exp)]
    GT           [reduce using rule 20 (exp)]
    GE           [reduce using rule 20 (exp)]
    DOUBLEPLUS   [reduce using rule 20 (exp)]
    DOUBLEMINUS  [reduce using rule 20 (exp)]
    LOGIC_AND    [reduce using rule 20 (exp)]
    LOGIC_OR     [reduce using rule 20 (exp)]
    ARITH_AND    [reduce using rule 20 (exp)]
    ARITH_OR     [reduce using rule 20 (exp)]
    $default     reduce using rule 20 (exp)


state 155

   76 fundec: FUNCTION id LPAREN tyfields RPAREN COLON typeid . EQ exp

    EQ  shift, and go to state 159


state 156

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp
   77 fundec: FUNCTION id LPAREN tyfields RPAREN EQ exp .

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    $default  reduce using rule 77 (fundec)


state 157

   69 tyfields: id COLON typeid COMMA . tyfields

    ID  shift, and go to state 2

    $default  reduce using rule 71 (tyfields)

    tyfields  go to state 160
    id        go to state 120


state 158

   78 mixdecs: VAR id ASSIGN ARRAY OF typeid LBRACK . exp RBRACK OF exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 161
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 159

   76 fundec: FUNCTION id LPAREN tyfields RPAREN COLON typeid EQ . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 162
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 160

   69 tyfields: id COLON typeid COMMA tyfields .

    $default  reduce using rule 69 (tyfields)


state 161

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp
   78 mixdecs: VAR id ASSIGN ARRAY OF typeid LBRACK exp . RBRACK OF exp

    RBRACK       shift, and go to state 163
    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55


state 162

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp
   76 fundec: FUNCTION id LPAREN tyfields RPAREN COLON typeid EQ exp .

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    $default  reduce using rule 76 (fundec)


state 163

   78 mixdecs: VAR id ASSIGN ARRAY OF typeid LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 164


state 164

   78 mixdecs: VAR id ASSIGN ARRAY OF typeid LBRACK exp RBRACK OF . exp

    INT     shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    IF      shift, and go to state 4
    WHILE   shift, and go to state 5
    FOR     shift, and go to state 6
    LET     shift, and go to state 7
    BREAK   shift, and go to state 8
    NIL     shift, and go to state 9
    NEW     shift, and go to state 10
    LPAREN  shift, and go to state 11
    MINUS   shift, and go to state 12

    exp     go to state 165
    lvalue  go to state 15
    opexp   go to state 16
    id      go to state 17


state 165

   12 exp: exp . DOUBLEPLUS
   13    | exp . DOUBLEMINUS
   27 opexp: exp . PLUS exp
   28      | exp . MINUS exp
   29      | exp . TIMES exp
   30      | exp . DIVIDE exp
   31      | exp . EQ exp
   32      | exp . NEQ exp
   33      | exp . GT exp
   34      | exp . LT exp
   35      | exp . GE exp
   36      | exp . LE exp
   37      | exp . ARITH_AND exp
   38      | exp . ARITH_OR exp
   39      | exp . LOGIC_AND exp
   40      | exp . LOGIC_OR exp
   78 mixdecs: VAR id ASSIGN ARRAY OF typeid LBRACK exp RBRACK OF exp .

    PLUS         shift, and go to state 40
    MINUS        shift, and go to state 41
    TIMES        shift, and go to state 42
    DIVIDE       shift, and go to state 43
    EQ           shift, and go to state 44
    NEQ          shift, and go to state 45
    LT           shift, and go to state 46
    LE           shift, and go to state 47
    GT           shift, and go to state 48
    GE           shift, and go to state 49
    DOUBLEPLUS   shift, and go to state 50
    DOUBLEMINUS  shift, and go to state 51
    LOGIC_AND    shift, and go to state 52
    LOGIC_OR     shift, and go to state 53
    ARITH_AND    shift, and go to state 54
    ARITH_OR     shift, and go to state 55

    $default  reduce using rule 78 (mixdecs)
